#
# Copyright (C) 2023-2024 Red Hat, Inc.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# SPDX-License-Identifier: Apache-2.0

name: e2e-tests-main

on:
  push:
    branches: [main]

  workflow_dispatch:
    inputs:
      organization:
        default: 'podman-desktop'
        description: 'Organization of the Podman Desktop repository'
        type: string
        required: true
      repositoryName:
        default: 'podman-desktop'
        description: 'Podman Desktop repository name'
        type: string
        required: true
      npm_target:
        default: 'test:e2e'
        description: 'The npm target to run tests. Use "test:e2e:all" to run all test suites, including Kubernetes tests.'
        type: string
        required: true
      branch:
        default: 'main'
        description: 'Podman Desktop repo branch'
        type: string
        required: true
      kind_provider:
        description: 'Kind cluster provider type'
        type: choice
        options:
        - docker
        - podman
        required: false
      update_with_extensions:
        description: 'Installation extensions before update'
        type: choice
        options:
        - 'false'
        - 'true'
        required: false

permissions:
  contents: read

jobs:
  e2e-tests:
    name: Run All E2E tests
    runs-on: ubuntu-24.04
    # disable on forks as secrets are not available
    if: github.event.repository.fork == false
    permissions:
      checks: write # required for mikepenz/action-junit-report
    steps:
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          repository: ${{ github.event.inputs.organization }}/${{ github.event.inputs.repositoryName }}
          ref: ${{ github.event.inputs.branch }}
        if: github.event_name == 'workflow_dispatch'

      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        if: github.event_name == 'push'

      - name: Set the default env. variables
        env:
          DEFAULT_NPM_TARGET: 'test:e2e'
          DEFAULT_KIND_PROVIDER: 'docker'
        run: |
          echo "NPM_TARGET=${{ github.event.inputs.npm_target || env.DEFAULT_NPM_TARGET }}" >> $GITHUB_ENV
          echo "KIND_PROVIDER=${{ github.event.inputs.kind_provider || env.DEFAULT_KIND_PROVIDER }}" >> $GITHUB_ENV

      - name: Update podman
        run: |
          echo "ubuntu version from kubic repository to install podman we need (v5)"
          ubuntu_version='23.10'
          echo "Add unstable kubic repo into list of available sources and get the repo key"
          sudo sh -c "echo 'deb https://download.opensuse.org/repositories/devel:/kubic:/libcontainers:/unstable/xUbuntu_${ubuntu_version}/ /' > /etc/apt/sources.list.d/devel:kubic:libcontainers:unstable.list"
          curl -L "https://download.opensuse.org/repositories/devel:/kubic:/libcontainers:/unstable/xUbuntu_${ubuntu_version}/Release.key" | sudo apt-key add -
          echo "install necessary dependencies for criu package which is not part of ${ubuntu_version}"
          sudo apt-get install -qq libprotobuf32t64 python3-protobuf libnet1
          echo "install criu manually from static location"
          curl -sLO http://cz.archive.ubuntu.com/ubuntu/pool/universe/c/criu/criu_3.16.1-2_amd64.deb && sudo dpkg -i criu_3.16.1-2_amd64.deb
          echo "Updating all dependencies..."
          sudo apt-get update -qq
          echo "installing/update podman package..."
          sudo apt-get -qq -y install podman || { echo "Start fallback steps for podman nightly installation from a static mirror" && \
            sudo sh -c "echo 'deb http://ftp.lysator.liu.se/pub/opensuse/repositories/devel:/kubic:/libcontainers:/unstable/xUbuntu_${ubuntu_version}/ /' > /etc/apt/sources.list.d/devel:kubic:libcontainers:unstable.list" && \
            curl -L "http://ftp.lysator.liu.se/pub/opensuse/repositories/devel:/kubic:/libcontainers:/unstable/xUbuntu_${ubuntu_version}/Release.key" | sudo apt-key add - && \
            sudo apt-get update && \
            sudo apt-get -y install podman; }
          podman version

      - name: Revert unprivileged user namespace restrictions in Ubuntu 24.04
        run: |
          # allow unprivileged user namespace
          sudo sysctl -w kernel.apparmor_restrict_unprivileged_userns=0

      # Enables multi-architecture support for building multi-arch manifests
      - name: Install QEMU for Multi-Arch
        run: |
          sudo apt install -y qemu-user-static

      - name: Set cgroup_manager to 'cgroupfs' instead of systemd
        run: |
          mkdir -p ~/.config/containers
          cat <<EOT >> ~/.config/containers/containers.conf
          [engine]
          cgroup_manager="cgroupfs"
          EOT
          podman info

      - uses: pnpm/action-setup@a7487c7e89a18df4991f7f222e4898a00d66ddda # v4.1.0
        name: Install pnpm
        with:
          run_install: false

      - uses: actions/setup-node@49933ea5288caeca8642d1e84afbd3f7d6820020 # v4.4.0
        with:
          node-version: 22
          cache: 'pnpm'

      - name: Execute pnpm
        run: pnpm install

      - name: Run E2E tests in Production Mode
        env:
          PODMANDESKTOP_CI_BOT_TOKEN: ${{ secrets.PODMANDESKTOP_CI_BOT_TOKEN }}
          TEST_PODMAN_MACHINE: 'true'
          SKIP_KIND_INSTALL: 'true'
          KIND_PROVIDER_GHA: ${{ env.KIND_PROVIDER }}
          ELECTRON_ENABLE_INSPECT: true
        run: |
          echo "Compiling the Podman Desktop in production mode"
          pnpm compile:current --linux dir
          path=$(realpath ./dist/linux-unpacked/podman-desktop)
          echo "Podman Desktop built binary: $path"
          export PODMAN_DESKTOP_BINARY=$path
          pnpm ${{ env.NPM_TARGET }}

      - name: Publish Test Report
        uses: mikepenz/action-junit-report@3585e9575db828022551b4231f165eb59a0e74e3 # v5.6.2
        if: always() # always run even if the previous step fails
        with:
          fail_on_failure: true
          include_passed: true
          detailed_summary: true
          annotate_only: true
          require_tests:  true
          report_paths: '**/*results.xml'

      - uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2
        if: always()
        with:
          name: e2e-tests
          path: |
            ./tests/**/output/
            !./tests/**/traces/raw

  win-update-e2e-test:
    name: win update e2e tests - ${{ matrix.installation }}
    runs-on: windows-2022
    # disable on forks as secrets are not available
    if: github.event.repository.fork == false
    permissions:
      checks: write # required for mikepenz/action-junit-report
    env:
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    timeout-minutes: 60
    strategy:
      fail-fast: false
      matrix:
        installation: ['vanilla', 'custom-extensions']
        exclude:
        - installation: ${{ (github.event.inputs.update_with_extensions && github.event.inputs.update_with_extensions == 'true') && 'N/A' || 'custom-extensions' }}
    steps:
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          repository: ${{ github.event.inputs.organization }}/${{ github.event.inputs.repositoryName }}
          ref: ${{ github.event.inputs.branch }}
        if: github.event_name == 'workflow_dispatch'

      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        if: github.event_name == 'push'

      - uses: pnpm/action-setup@a7487c7e89a18df4991f7f222e4898a00d66ddda # v4.1.0
        name: Install pnpm
        with:
          run_install: false

      - uses: actions/setup-node@49933ea5288caeca8642d1e84afbd3f7d6820020 # v4.4.0
        with:
          node-version: 22
          cache: 'pnpm'

      - name: Execute pnpm
        run: pnpm install

      - name: Adjust/Downgrade local podman desktop version Windows
        run: |
          $version="1.15.0"
          jq --arg version "$version" '.version = $version' package.json | Out-File -FilePath package.json_tmp
          Move-Item -Path package.json_tmp -Destination package.json -Force

      - name: Build Podman Desktop locally with electron updater included
        env:
          ELECTRON_ENABLE_INSPECT: true
        run: |
          pnpm compile:current --win nsis
          $path=('./dist/win-unpacked/Podman Desktop.exe' | resolve-path).ProviderPath
          echo $path
          echo ("PODMAN_DESKTOP_BINARY=" + $path) >> $env:GITHUB_ENV

      - name: Run E2E Update test
        env:
          INSTALLATION_TYPE: ${{ matrix.installation }}
        run: |
          echo "${{ env.PODMAN_DESKTOP_BINARY }}"
          echo "${{ env.INSTALLATION_TYPE }}"
          pnpm test:e2e:update:run

      - name: Publish Test Report
        uses: mikepenz/action-junit-report@3585e9575db828022551b4231f165eb59a0e74e3 # v5.6.2
        if: always() # always run even if the previous step fails
        with:
          fail_on_failure: true
          include_passed: true
          detailed_summary: true
          annotate_only: true
          require_tests:  true
          report_paths: '**/*results.xml'

      - uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2
        if: always()
        with:
          name: update-e2e-test-${{ matrix.installation }}
          path: |
            ./tests/**/output/
            !./tests/**/traces/raw

  mac-update-e2e-test:
    name: mac update e2e tests
    runs-on: macos-latest
    # disable on forks as secrets are not available
    if: github.event.repository.fork == false
    env:
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    timeout-minutes: 60
    steps:
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          repository: ${{ github.event.inputs.organization }}/${{ github.event.inputs.repositoryName }}
          ref: ${{ github.event.inputs.branch }}
        if: github.event_name == 'workflow_dispatch'

      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        if: github.event_name == 'push'

      - uses: pnpm/action-setup@a7487c7e89a18df4991f7f222e4898a00d66ddda # v4.1.0
        name: Install pnpm
        with:
          run_install: false

      - uses: actions/setup-node@49933ea5288caeca8642d1e84afbd3f7d6820020 # v4.4.0
        with:
          node-version: 22
          cache: 'pnpm'

      - name: Execute pnpm
        run: pnpm install

      - name: Adjust/Downgrade local podman desktop version
        run: |
          version="1.15.0"
          jq --arg version "$version" '.version = $version' package.json > package.json_tmp
          mv package.json_tmp package.json

      - name: Build Podman Desktop locally with electron updater included
        env:
          ELECTRON_ENABLE_INSPECT: true
        run: |
          pnpm compile:current --mac dmg
          dmgPath=$(realpath $(find ./dist -name "*.dmg"))
          echo "DMG Path: $dmgPath"
          # extract the dmg
          hdiutil attach $dmgPath
          pdVolumePath=$(find /Volumes -name *1.15.0*)
          echo "PD Volume path: $pdVolumePath"
          sudo cp -R "$pdVolumePath/Podman Desktop.app" /Applications
          # codesign the extracted app
          appPath="/Applications/Podman Desktop.app"
          sudo codesign --force --deep --sign - "$appPath"
          codesign --verify --deep --verbose=2 "$appPath"
          binaryPath="$appPath/Contents/MacOS/Podman Desktop"
          echo "PODMAN_DESKTOP_BINARY=$binaryPath" >> $GITHUB_ENV

      - name: Run E2E Update test
        env:
          UPDATE_PODMAN_DESKTOP: true
        run: |
          echo "${{ env.PODMAN_DESKTOP_BINARY }}"
          pnpm test:e2e:update:run

      - name: Publish Test Report
        uses: mikepenz/action-junit-report@3585e9575db828022551b4231f165eb59a0e74e3 # v5.6.2
        if: always() # always run even if the previous step fails
        with:
          fail_on_failure: true
          include_passed: true
          detailed_summary: true
          annotate_only: true
          require_tests:  true
          report_paths: '**/*results.xml'

      - uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2
        if: always()
        with:
          name: mac-update-e2e-test
          path: |
            ./tests/**/output/
            !./tests/**/traces/raw
