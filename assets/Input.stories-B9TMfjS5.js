import{n as m,s as g,p as v,f as h,a as b,b as s,c,d as I,t as C,e as x,g as $,h as w}from"./iframe-B3RONgUq.js";import{c as y,i as R,d as q}from"./create-runtime-stories-BDza8QMx.js";import"./ErrorMessage-CnYW6fDz.js";import"./Button-BYJDFf_x.js";import{I as u}from"./Table-Cn4MwqYG.js";import"./LinearProgress-tK0-UV9D.js";import"./Spinner-DlgW6lGp.js";import"./EmptyScreen-ByECFzFX.js";import"./Icon-BcYSPoO7.js";import"./attributes-8Baoim8D.js";import"./index-CMF4bWwl.js";import"./StarIcon-BmUDm9Re.js";import"./index-XU7UiOqo.js";const V=(n,l,i=m)=>{let a=()=>$(l?.(),["_children"]);u(n,g(a,{children:(o,d)=>{var r=C();x(()=>w(r,a().content)),c(o,r)},$$slots:{default:!0}}))},B={component:u,render:V,title:"Input/Input",tags:["autodocs"],argTypes:{placeholder:{control:"text",description:"placeholder text to show if input field is empty",defaultValue:""},value:{control:"text",description:"initial value",defaultValue:""},disabled:{control:"boolean",description:"Flag the input as being disabled",defaultValue:!1},readonly:{control:"boolean",description:"if true, the input field cannot be edited",defaultValue:!1},required:{control:"boolean",description:"if true, the input field is required",defaultValue:!1},clearable:{control:"boolean",description:"if true, the input field can be cleared with an icon",defaultValue:!1},error:{control:"text",description:"error message to show if input is invalid",defaultValue:""}},parameters:{docs:{description:{component:"These are the stories for the `Input` component.\nIt's the component used to get text/input from the user."}}}},{Story:e}=q();var E=h("<!> <!> <!> <!> <!> <!>",1);function f(n,l){v(l,!1),R();var i=E(),a=b(i);e(a,{name:"Basic",args:{placeholder:"Basic input with a default value",value:"Value predefined"},parameters:{__svelteCsf:{rawCode:"<Input {...args}>{args.content}</Input>"}}});var o=s(a,2);e(o,{name:"Readonly",args:{readonly:!0,placeholder:"readonly cannot edit the input field"},parameters:{__svelteCsf:{rawCode:"<Input {...args}>{args.content}</Input>"}}});var d=s(o,2);e(d,{name:"Required",args:{required:!0,placeholder:"example of required field"},parameters:{__svelteCsf:{rawCode:"<Input {...args}>{args.content}</Input>"}}});var r=s(d,2);e(r,{name:"Clearable",args:{clearable:!0,placeholder:"the input field can be cleared with an icon"},parameters:{__svelteCsf:{rawCode:"<Input {...args}>{args.content}</Input>"}}});var p=s(r,2);e(p,{name:"Disabled",args:{disabled:!0,placeholder:"the input field is disabled"},parameters:{__svelteCsf:{rawCode:"<Input {...args}>{args.content}</Input>"}}});var _=s(p,2);e(_,{name:"Error",args:{placeholder:"Input has an error",error:"this input is being invalid"},parameters:{__svelteCsf:{rawCode:"<Input {...args}>{args.content}</Input>"}}}),c(n,i),I()}f.__docgen={data:[],name:"Input.stories.svelte"};const t=y(f,B),J=["Basic","Readonly","Required","Clearable","Disabled","Error"],K={...t.Basic,tags:["svelte-csf-v5"]},L={...t.Readonly,tags:["svelte-csf-v5"]},N={...t.Required,tags:["svelte-csf-v5"]},Q={...t.Clearable,tags:["svelte-csf-v5"]},U={...t.Disabled,tags:["svelte-csf-v5"]},W={...t.Error,tags:["svelte-csf-v5"]};export{K as Basic,Q as Clearable,U as Disabled,W as Error,L as Readonly,N as Required,J as __namedExportsOrder,B as default};
